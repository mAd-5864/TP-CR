function Train()
    try
        S = readmatrix('TrainAdaptado.csv', 'Delimiter', ';', 'DecimalSeparator', '.');
    catch
        error('Erro ao carregar o arquivo CSV. Verifique o caminho e a formatação.');
    end

    % Obter os valores de entrada (Input_data)
    in = S(:, 3:end)';

    % Obter os valores do alvo (Target_data)
    t = S(:, 2)';

    % Definir diferentes funções de treino
    trainFcns = {'trainscg', 'trainlm', 'trainrp'};
    
    % Definir diferentes funções de ativação
    transferFcns = {'logsig', 'tansig', 'purelin'};

    for f = 1:length(transferFcns)
        for g = 1:length(trainFcns)
        for iteration = 1:30
            %Criar rede neuronal
            net = feedforwardnet(10);
            net.divideFcn = '';

            % Timer
            tic;

            % Alterar a função de ativação e treino
            net.trainFcn = trainFcns{g};
            net.layers{1}.transferFcn = transferFcns{f};

            % Treinar a rede
            net.trainParam.showWindow = false;
            net = train(net, in, t);

            % Parar o Timer
            tempo_execucao = toc;

            % Simular a rede e calc
            y = net(in);
            erro = perform(net, t, y);
            accuracy = (1-erro)*100;

            fprintf("Funçôes de Treino: %s e Ativação: %s\n", trainFcns{g}, transferFcns{f});
            fprintf("Erro: %f\n", erro);
            fprintf("Accuracy: %.2f%%\n", accuracy);
            fprintf("Execution Time: %.2f seconds\n", tempo_execucao);
        end
        end
    end
    
    % Save the best network
    save('melhores_redes.mat','net');
    writetable(train, 'MelhoresTrain.csv', 'Delimiter', ';');
end
